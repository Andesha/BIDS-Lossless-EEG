%% SCRIPT DESCRIPTION
    % This script takes a file containing ICA information and
    % will calculate the % variance accounted for each of the components. This
    % quality can be printed along with the topos, where a % represents the %
    % of the IC that could not be represented using a single dipole. This
    % calcultaion uses the Fieldtrip-lite function, pop_multifit, and takes a
    % substantial amount of time to preform. ICMARC is then used to aid in
    % component classification, using the results of dipfit to guess at the
    % sourcse of each component. Both of these calculations generate comp_info
    % marks.
    %
%% From Batch              file_strswap 
%--------------------------------------------------------------------------
% File :                    [batch_dfn]         Data file name
% Location:                 [batch_dfp]         Data file path
% in_path:                  [in_path]           Relative path to input data files assuming cd = work_path
% Current Parameters:
%                       Min mixed signal    >= 75%
%                       Secondary signal   >= 25%

logging_log('INFO','Checking for JVM...');
javachk('jvm');

% TODO(brad) this isn't added for some reason
addpath([pwd '/bids/code/lossless/dependencies/eeglab_asr_amica/plugins/Fieldtrip-lite141209/src'])

ALLEEG = []; % Make sure ALLEEG is empty

%% LOAD CONCAT DATASET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load the concat dataset if exists

if exist('bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_concat_data.set');
    logging_log('INFO','Loading set file: [batch_dfn,_,-1]_concat_data...');
    tic;
    EEG = pop_loadset('filename','bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_concat_data.set');
    EEG = eeg_checkset(EEG);
    logging_log('INFO','TIME TO: LOAD DATASET...');
    toc
    [ALLEEG, EEG, CURRENTSET] = eeg_store( ALLEEG, EEG );
    % EEG.filename gets lost when performing eeg_store. We will need this field to have 
    % the correct value when determining which dip file to save (_dip or _asrdip) below
    ALLEEG(CURRENTSET).filename = 'bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_concat_data.set'; % here, we reassign the filename
end

%% LOAD CONCAT_ASR DATASET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load the concat_asr dataset if exists

if exist('bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_concat_asrdata.set');
    logging_log('INFO','Loading set file: [batch_dfn,_,-1]_concat_asrdata...');
    tic;
    EEG = pop_loadset('filename','bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_concat_asrdata.set');
    EEG = eeg_checkset(EEG);
    logging_log('INFO','TIME TO: LOAD DATASET...');
    toc
    [ALLEEG, EEG, CURRENTSET] = eeg_store( ALLEEG, EEG );
    ALLEEG(CURRENTSET).filename = 'bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_concat_asrdata.set';
end

%% DIPFIT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Does the dipole fitting procedures. This takes a substantial amount of
% time.
% Run dipfit on concat_data and/or concat_asrdata
% TODO: This can likely be optimized to run dipfit on both datasets in parallel

for dataset=1:length(ALLEEG); EEG = ALLEEG(dataset); % For now, serially loops over both files if both are provided

% TODO: Make sure this is all needed, seems to be repeating things
logging_log('INFO','FITTING DIPOLES...');
tic;
EEG = pop_dipfit_settings( EEG, 'hdmfile','bids/code/lossless/misc/standard_vol.mat', ...
				'coordformat','MNI', ...
				'mrifile','bids/code/lossless/misc/standard_mri.mat', ...
				'chanfile','bids/code/lossless/misc/standard_1020.elc', ...
				'coord_transform',[0 0 0 0 0 0 1 1 1] , ...
				'chansel',[1:EEG.nbchan] );

EEG = pop_multifit(EEG, [1:EEG.nbchan] ,'threshold',100,'plotopt',{'normlen' 'on'});

EEG=eeg_checkset(EEG);
logging_log('INFO','TIME TO: FIT DIPOLES...');
toc

%% Use the ICMARC plugin 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ICMARC uses some kind of system to determine the probability of each 
% component being one of the following classifications. Classifications based:

% (blink)(neural)(heart)(lateye)(muscle)(mixed)
% (  1  )(  2   )(  3  )(  4   )(  5   )(  6  )

% Run ICMARC
EEG = pop_ICMARC_interface(EEG, 'established_spatial_features', 0);

%Reference
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Arbitrary plot of the first 10 components
    %pop_ICMARC_selectcomps_interface(EEG, [1   2   3   4   5   6   7   8   9  10]);
% The percent chance that the component is of each class, size is the number of components by 6 matrix.
    %EEG.reject.probability
% The highest percentage becomes the listed class, # corresponding to type
    %EEG.reject.classtype

%% MARK ICs FOR REJECTION BASED ON RV
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Creates marks based on dipfit and ICMARC results. Dipfit marks are added
% for rejection while ICMARC are just for reference.

%IC RISIDUAL VARIENCE - BLUE TAG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Residuals greater than 15% are flagged
logging_log('INFO','UPDATE MARKS STRUCTURE WITH IC_RV...');
tic;
% Dipole criteria changed from 0.15 to 0.2 to be less sensitive
EEG.reject.gcompreject(find([EEG.dipfit.model.rv]>.15))=1;
EEG.reject.gcompreject(find(isnan([EEG.dipfit.model.rv])))=1;
EEG.marks=marks_add_label(EEG.marks,'comp_info', ...
	{'ic_rv',[1,0,0],[1,0,0],-1,EEG.reject.gcompreject'});
logging_log('INFO','TIME TO: UPDATE MARKS STRUCTURE...');
toc

% COMBINE MARKS STRUCTURE INTO MANUAL FLAGS...
tic;
EEG=pop_marks_merge_labels(EEG,'comp_info',{'manual','ic_rv'},'target_label','manual');
logging_log('INFO','TIME TO: COMBINE MARKS STRUCTURE INTO MANUAL FLAGS...');
toc


%INCREASE ICMARC SENSITIVITY TO NON_MIXED SIGNALS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% For all of the components, if it was classified as mixed
% Double check to see if that criteria was over 75%, if not use the second
% highest if it is over 25%
logging_log('INFO','Increaseing sensitivity of ')
for i = 1:length(EEG.reject.classtype)
    if  EEG.reject.classtype(i) == 6
        if EEG.reject.probabilities(i,6) < 0.75
            leftovers = EEG.reject.probabilities(i,1:5);
            [~,newclass] = max(leftovers);
            if leftovers(newclass) > 0.25
                EEG.reject.classtype(i) = newclass;
                logging_log('INFO',['Changed component ' num2str(i) ' classifictaion from 6 to ' num2str(newclass)])
            end
        end
    end
end

% The percent chance that the component is of each class, size is the number of components by 6 matrix.
    %EEG.reject.probability
% The highest percentage becomes the listed class, # corresponding to type
    %EEG.reject.classtype


%ICMARC NEURAL - GREEN TAG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
logging_log('INFO','UPDATE MARKS STRUCTURE WITH IMARC NEURAL COMPS...');
tic;
ICMARC_neural = zeros([1,length(EEG.reject.classtype)]);
ICMARC_neural(find(EEG.reject.classtype==2)) = 1;
ICMARC_neural = ICMARC_neural';
EEG.marks=marks_add_label(EEG.marks,'comp_info', ...
	{'neural',[0,0.4,0.3],[0,0.4,0.3],1,ICMARC_neural});
logging_log('INFO','TIME TO: UPDATE MARKS STRUCTURE...');
toc

%ICMARC BIO (blink,lateye,heart,muscle) - YELLOW TAG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
logging_log('INFO','UPDATE MARKS STRUCTURE WITH IMARC GARBAGE COMPS...');
tic;
ICMARC_bio = zeros([1,length(EEG.reject.classtype)]);
ICMARC_bio(find(EEG.reject.classtype~=2 & EEG.reject.classtype~=6)) = 1;
ICMARC_bio = ICMARC_bio';
EEG.marks=marks_add_label(EEG.marks,'comp_info', ...
	{'bio',[0.4,0,0.3],[0.4,0,0.3],1,ICMARC_bio});
logging_log('INFO','TIME TO: UPDATE MARKS STRUCTURE...');
toc

%% SAVE DIP DATA SET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%if strcmp(EEG.filename,'[bids/code/lossless,_,-1]_concat_data.set');
    logging_log('INFO','Saving set file: bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_dip.set...');
    tic;
    EEG = pop_saveset( EEG, 'filename','bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_dip.set');
    logging_log('INFO','TIME TO: SAVE DIP DATA SET...');
    toc
%else
%    logging_log('INFO','Saving set file: [batch_dfn,_,-1]_asrdip.set...');
%    tic;
%    EEG = pop_saveset( EEG, 'filename','bids/derivatives/lossless/[/,1,batch_dfn,_,-1]_asrdip.set');
%    logging_log('INFO','TIME TO: SAVE ASR DIP DATA SET...');
%    toc
%end

end % end of for loop for current dataset (concat_data or concat_asrdata)

logging_log('INFO', 'Scheduler: [scheduler]');
print_chan_sample(EEG);

